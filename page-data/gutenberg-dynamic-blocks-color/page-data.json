{"componentChunkName":"component---src-templates-blog-post-js","path":"/gutenberg-dynamic-blocks-color/","result":{"data":{"site":{"siteMetadata":{"title":"rafhun"}},"markdownRemark":{"id":"8749e48c-78d4-589e-bf3e-13538e921663","excerpt":"It is as easy as declaring support for the color picker for your blocks to add a color settings panel for your blocks. We have already seen how to handle these…","html":"<p>It is as easy as declaring support for the color picker for your blocks to add a color settings panel for your blocks. We have already seen how to handle these in normal blocks (if no customization is necessary you do not have to do anything). Let’s no look at the helper we need to generate the necessary classes and possibly inline styles in dynamic blocks.</p>\n<h2>Supports</h2>\n<p>For clarity here is what you add to the supports property in your <code class=\"language-text\">block.json</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"supports\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"__experimentalColor\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This example just deals with the default text and background colors. However you can use the same approach if you additionally declare support for gradients and/or the link color.</p>\n<h2>PHP Helper</h2>\n<p>This example demonstrates a possible class based helper setup.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">MyPlugin<span class=\"token punctuation\">\\</span>Helpers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomColors</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Generates classes and styles for possible custom text and background colors\n     *\n     * @param array $attributes - The block attributes\n     *\n     * @return array $css - Contains keys text and background with class and inline style information\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">generateStyles</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$textColors</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">textColor</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$backgroundColors</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">backgroundColor</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'text'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$textColors</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'background'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$backgroundColors</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>This is the main setup of our <code class=\"language-text\">CustomColors</code> helper class. It contains a static method used to generate an array of classes and possibly styles we can work with. It expects to receive the block attributes array as its sole argument. This method’s only concern is to then compile the returns of two helper functions, put them into an array and return it.</p>\n<p>Let us look at what is actually happening within the helpers.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">MyPlugin<span class=\"token punctuation\">\\</span>Helpers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomColors</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">/**\n     * Generate classes and possibly inline styles if there are any custom text colors set\n     *\n     * @param array $attributes - The block attributes\n     *\n     * @return array $textColors - Array with an array of css classes and a string of inline styles\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">textColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$textColors</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'classes'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'inlineStyles'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$hasNamedTextColor</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_key_exists</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'textColor'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$hasCustomTextColor</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_key_exists</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'customTextColor'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// If there is a text color</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$hasCustomTextColor</span> <span class=\"token operator\">||</span> <span class=\"token variable\">$hasNamedTextColor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Add has-text-color class</span>\n            <span class=\"token variable\">$textColors</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'classes'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'has-text-color'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$hasNamedTextColor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Add the color class.</span>\n            <span class=\"token variable\">$textColors</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'classes'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>\n                <span class=\"token single-quoted-string string\">'has-%s-color'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'textColor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">elseif</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$hasCustomTextColor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Add the custom color inline style</span>\n            <span class=\"token variable\">$textColors</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'inlineStyles'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span><span class=\"token operator\">=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>\n                <span class=\"token single-quoted-string string\">'color: %s;'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'customTextColor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$textColors</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>This private method return an array in which possible custom classes are stored as an array and inline styles as a string. As its argument we just pass the <code class=\"language-text\">$attributes</code> of the block.</p>\n<p>In a next step we check the attributes for a named and a custom text color. If either of those exist we can assign <code class=\"language-text\">has-text-color</code> the WordPress default text color indicator class to the classes array.</p>\n<p>If there is a named text color assigned the attribute <code class=\"language-text\">textColor</code> contains that colors name. This is transformed into the correct class name (again respecting WordPress standards) using <code class=\"language-text\">sprintf</code>.</p>\n<p>In the other case when there is a custom text color, we generate the corresponding inline style using <code class=\"language-text\">sprintf</code> once more. We then return the array we just created.</p>\n<p>Now the process for the background color is the exact same, just the naming is slightly different. Check the full class example at the end of this post for reference.</p>\n<h2>Usage in Render Function</h2>\n<p>To apply the classes and inline styles to your rendered component you can store the base information from the helper in a variable that you can then manipulate as follows. The below code assumes that the <code class=\"language-text\">Helpers</code> namespace is available through autoload or manual includes. Adjust as necessary for your project.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// Inside of the render function</span>\n<span class=\"token variable\">$colors</span> <span class=\"token operator\">=</span> Helpers\\<span class=\"token package\">CustomColors</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">generateStyles</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$classes</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_merge</span><span class=\"token punctuation\">(</span>\n  <span class=\"token variable\">$colors</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'background'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'classes'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token variable\">$colors</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'text'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'classes'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$classAttribute</span> <span class=\"token operator\">=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>\n  <span class=\"token single-quoted-string string\">' class=\"%s\"'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">esc_attr</span><span class=\"token punctuation\">(</span><span class=\"token function\">implode</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$classes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$styleAttribute</span> <span class=\"token operator\">=</span>\n  <span class=\"token variable\">$colors</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'background'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'inlineStyles'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span>\n  <span class=\"token variable\">$colors</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'text'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'inlineStyles'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token operator\">?</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>\n      <span class=\"token single-quoted-string string\">' style=\"%s\"'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">esc_attr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$colors</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'background'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'inlineStyles'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span> <span class=\"token function\">esc_attr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$colors</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'text'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'inlineStyles'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token single-quoted-string string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$blockContent</span> <span class=\"token operator\">=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>\n  <span class=\"token single-quoted-string string\">'&lt;div %1$s %2$s>'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token variable\">$classAttribute</span><span class=\"token punctuation\">,</span>\n  <span class=\"token variable\">$styleAttribute</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Continue render</span></span></code></pre></div>\n<p>Classes are first merged together into one array. Here you also have an opportunity to add more classes, i. e. custom component classes or ones generated by bock alignment controls or other block controls. Just make sure to pass them within an array. The array is then imploded, escaped and put into a class attribute.</p>\n<p>Possible inline styles are just empty strings if not set so we can check if either one exists and if so just concatenate them together, escape them and put them into a style attribute.</p>\n<p>Then add the classes and styles to the appropriate container element of your block.</p>\n<p><strong>Hint:</strong> You can also separate background and text classes and styles if you want to put them on different elements, i. e. if you need more specificity for certain elements.</p>\n<p>Check out the whole helper class example below if you want to see it all put together.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">MyPlugin<span class=\"token punctuation\">\\</span>Helpers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomColors</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Generates classes and styles for possible custom text and background colors\n     *\n     * @param array $attributes - The block attributes\n     *\n     * @return array $css - Contains keys text and background with class and inline style information\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">generateStyles</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$textColors</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">textColor</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$backgroundColors</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">backgroundColor</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'text'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$textColors</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'background'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$backgroundColors</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Generate classes and possibly inline styles if there are any custom text colors set\n     *\n     * @param array $attributes - The block attributes\n     *\n     * @return array $textColors - Array with an array of css classes and a string of inline styles\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">textColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$textColors</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'classes'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'inlineStyles'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$hasNamedTextColor</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_key_exists</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'textColor'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$hasCustomTextColor</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_key_exists</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'customTextColor'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// If there is a text color</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$hasCustomTextColor</span> <span class=\"token operator\">||</span> <span class=\"token variable\">$hasNamedTextColor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Add has-text-color class</span>\n            <span class=\"token variable\">$textColors</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'classes'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'has-text-color'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$hasNamedTextColor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Add the color class.</span>\n            <span class=\"token variable\">$textColors</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'classes'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>\n                <span class=\"token single-quoted-string string\">'has-%s-color'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'textColor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">elseif</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$hasCustomTextColor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Add the custom color inline style</span>\n            <span class=\"token variable\">$textColors</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'inlineStyles'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span><span class=\"token operator\">=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>\n                <span class=\"token single-quoted-string string\">'color: %s;'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'customTextColor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$textColors</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Generate classes and possibly inline styles if there are any custom background colors set\n     *\n     * @param array $attributes - The block attributes\n     *\n     * @return array $backgroundColors - Array with an array of css classes and a string of inline styles\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">backgroundColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$backgroundColors</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'classes'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'inlineStyles'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$hasNamedBackgroundColor</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_key_exists</span><span class=\"token punctuation\">(</span>\n            <span class=\"token single-quoted-string string\">'backgroundColor'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$hasCustomBackgroundColor</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_key_exists</span><span class=\"token punctuation\">(</span>\n            <span class=\"token single-quoted-string string\">'customBackgroundColor'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// If has background color.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$hasCustomBackgroundColor</span> <span class=\"token operator\">||</span> <span class=\"token variable\">$hasNamedBackgroundColor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Add has-background-color class</span>\n            <span class=\"token variable\">$backgroundColors</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'classes'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'has-background'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$hasNamedBackgroundColor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Add the background-color class.</span>\n            <span class=\"token variable\">$backgroundColors</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'classes'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>\n                <span class=\"token single-quoted-string string\">'has-%s-background-color'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'backgroundColor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">elseif</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$hasCustomBackgroundColor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Add the custom background-color inline style.</span>\n            <span class=\"token variable\">$backgroundColors</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'inlineStyles'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span><span class=\"token operator\">=</span> <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>\n                <span class=\"token single-quoted-string string\">'background-color: %s;'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'customBackgroundColor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$backgroundColors</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>","frontmatter":{"title":"Using colors in dynamic blocks","date":"November 06, 2020","description":null}},"previous":{"fields":{"slug":"/gather-wordpress-post-data/"},"frontmatter":{"title":"Gather Post Data in WordPress"}},"next":{"fields":{"slug":"/wp-customizer-sanitizers/"},"frontmatter":{"title":"Sanitizer Functions For the WordPress Customizer"}}},"pageContext":{"id":"8749e48c-78d4-589e-bf3e-13538e921663","previousPostId":"339cfe2d-8a4c-5647-9de3-12ef1990b536","nextPostId":"601dff8f-5ad9-5c58-8066-9f65cfc0e142"}},"staticQueryHashes":["1633425274","2841359383"]}