{"componentChunkName":"component---src-templates-blog-post-js","path":"/gutenberg-post-data/","result":{"data":{"site":{"siteMetadata":{"title":"rafhun"}},"markdownRemark":{"id":"4bb89b0d-bb01-5344-ab9d-bfa7ff7090db","excerpt":"In the different data stores the block editor provides there is a lot of information stored that might be useful to display. Get the current title Use the…","html":"<p>In the different data stores the block editor provides there is a lot of information stored that might be useful to display.</p>\n<h2>Get the current title</h2>\n<p>Use the following hook to get the current title of the post you are editing. Use this to i. e. prepopulate templates, link editor blocks to the title or generate some strings based on the title.</p>\n<p>Hint: since this makes use of a hook make sure to place this within a functional component.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSelect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@wordpress/data\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> postTitle <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useSelect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">select</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getEditedPostAttribute <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core/editor\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> postTitle<span class=\"token operator\">:</span> <span class=\"token function\">getEditedPostAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>I prefer to return an object and destructure it as is done above since this let’s us easily extract more data using the <code class=\"language-text\">useSelect</code> hook.</p>\n<h2>Get Current Post Data</h2>\n<p>Make use of <code class=\"language-text\">getCurrentPost</code> to access the latest saved data about a post. This gives you access to a variety of data, it is what is returned by a REST query. Use this as follows.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSelect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@wordpress/data\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> post <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useSelect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">select</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getCurrentPost <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core/editor\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> post<span class=\"token operator\">:</span> <span class=\"token function\">getCurrentPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You now can read the post data inside of the <code class=\"language-text\">post</code> variable. It is probably easiest to further destructure this object as in the following example.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  author<span class=\"token punctuation\">,</span>\n  categories<span class=\"token punctuation\">,</span>\n  content<span class=\"token punctuation\">,</span>\n  date_gmt<span class=\"token punctuation\">,</span>\n  featured_media<span class=\"token punctuation\">,</span>\n  id<span class=\"token punctuation\">,</span>\n  link<span class=\"token punctuation\">,</span>\n  title<span class=\"token punctuation\">,</span>\n  type<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> post\n\n<span class=\"token comment\">// For custom post types: rename keys with hyphens during destructuring:</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"rh-custom-taxonomy\"</span><span class=\"token operator\">:</span> customTaxonomy<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"rh-custom-taxonomy-2\"</span><span class=\"token operator\">:</span> customTaxonomy2<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> post</code></pre></div>\n<p>Taxonomy information is returned as an array of term ID’s, the author and featured media also return just an ID, most other keys just contain strings.</p>\n<h2>Get taxonomy data</h2>\n<p>Use <code class=\"language-text\">getEntityRecord</code> to retrieve information for the returned taxonomy terms. Continuing the above example you can use the following code to access data for all terms in <code class=\"language-text\">customTaxonomy</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> customTaxonomyTermLinks <span class=\"token operator\">=</span> <span class=\"token function\">useSelect</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">select</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getEntityRecord <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"core\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> loaded <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">const</span> links <span class=\"token operator\">=</span> customTaxonomy<span class=\"token operator\">?.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">termId</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> term <span class=\"token operator\">=</span> <span class=\"token function\">getEntityRecord</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"taxonomy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rh-custom-taxonomy\"</span><span class=\"token punctuation\">,</span> termId<span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>term<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>loaded <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>termId<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>term<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>term<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> loaded <span class=\"token operator\">&amp;&amp;</span> links\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>customTaxonomy<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>What is happening here? We again make use of the <code class=\"language-text\">useSelect</code> hook since we want to retrieve information from the <code class=\"language-text\">data/core</code> store. Inside the <code class=\"language-text\">links</code> variable is set up by mapping the array of taxonomy id’s. For each id we get the entity record then put the return data directly into an anchor element (you could also just return the whole term object). The second paramter of <code class=\"language-text\">useSelect</code> specifies that this function should only be run if <code class=\"language-text\">customTaxonomy</code> changes.</p>\n<p>This make sense if you want to build a link list anyways since this way you only need to loop over the terms once.</p>\n<p>The easiest way to turn the returned data now stored in the <code class=\"language-text\">customTaxonomyTermLinks</code> variable, use the <code class=\"language-text\">reduce</code> method as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> termLinks <span class=\"token operator\">=</span>\n  customTaxonomyTermLinks <span class=\"token operator\">&amp;&amp;</span>\n  customTaxonomyTermLinks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n    <span class=\"token operator\">?</span> <span class=\"token function\">__</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No terms found'</span><span class=\"token punctuation\">,</span> 'text<span class=\"token operator\">-</span>domain<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> customTaxonomyTermLinks<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> curr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>prev<span class=\"token punctuation\">,</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">,</span> curr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This example returns all links comma separated.</p>","frontmatter":{"title":"Gutenberg and Post Data","date":"October 27, 2020","description":null}},"previous":{"fields":{"slug":"/wp-admin-branding/"},"frontmatter":{"title":"Branding the WordPress backend"}},"next":{"fields":{"slug":"/git-to-remember/"},"frontmatter":{"title":"Git to Remember"}}},"pageContext":{"id":"4bb89b0d-bb01-5344-ab9d-bfa7ff7090db","previousPostId":"3ce6b6ff-1e79-503e-a789-79d56ab169c4","nextPostId":"1edd2a27-595f-56e0-a170-f6aa5f845b18"}},"staticQueryHashes":["1633425274","2841359383"]}