{"componentChunkName":"component---src-templates-blog-post-js","path":"/wordpress-customizer-logo/","result":{"data":{"site":{"siteMetadata":{"title":"rafhun"}},"markdownRemark":{"id":"bde32c91-e7b0-5af9-9e0a-b790ef2483a0","excerpt":"The WordPress customizer offers an easy interface for users to set their own logos. However by default the customization options seem limited as WordPress…","html":"<p>The WordPress customizer offers an easy interface for users to set their own logos. However by default the customization options seem limited as WordPress automatically generates the markup for the logo linking it to the front page. Let’s check out how we can implement the logo into our themes.</p>\n<h2>Setup</h2>\n<p>To enable the custom logo in the customizer your theme must declare support for it in your theme. Within that declaration you can set some options for the logo. Making full use of the defaults you can just declare:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token function\">add_theme_support</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'custom-logo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can also pass in an array of options.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$options</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token single-quoted-string string\">'height'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token single-quoted-string string\">'width'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span>\n  <span class=\"token single-quoted-string string\">'flex-height'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token single-quoted-string string\">'flex-width'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token single-quoted-string string\">'header-text'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'site-title'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'site-description'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token single-quoted-string string\">'unlink-homepage-logo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">add_theme_support</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'custom-logo'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$options</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Check out the <a href=\"https://developer.wordpress.org/themes/functionality/custom-logo/\">WordPress Theme Handbook</a> for full documentation of the options.</p>\n<h2>Default</h2>\n<p>If you are happy with the default markup that is generated by core you can use the <code class=\"language-text\">get_custom_logo()</code> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// Probably in your Header template</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">has_custom_logo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">the_custom_logo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// or echo get_the_custom_logo();</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The logo is always linked to home unless the theme supports removing the link on the front page. If linked this returns the following markup.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/link/to/home<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>custom-logo-link<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>home<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span>\n    <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/path/to/logo.jpg<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Site Title (or custom alt text)<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>custom-logo<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>Custom Classes</h2>\n<p>If you wish to change the attributes on the actual image tag that contains the logo you can make use of the <code class=\"language-text\">get_custom_logo_image_attributes</code> filter. It let’s you edit the attributes array of the <code class=\"language-text\">wp_get_attachment_image</code> call which is used to generate the markup.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token function\">add_filter</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'get_custom_logo_image_attributes'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$attr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token variable\">$attr</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'class'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'your-own-class'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token variable\">$attr</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you also want to control the link attributes you need to filter the whole output with the <code class=\"language-text\">get_custom_logo</code> filter. Since you are already filtering in this case anyways you might want to include possible image tag edits in this function. We make use of PHP’s <code class=\"language-text\">str_replace</code> to change the class and add an additional attribute to the link and also change the logo image’s class in the following example.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token function\">add_filter</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'get_custom_logo'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$html</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Change link class, add a title</span>\n  <span class=\"token variable\">$html</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'class=\"custom-logo-link\"'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'class=\"your-logo-link-class\" title=\"'</span> <span class=\"token punctuation\">.</span> <span class=\"token function\">esc_attr__</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'A custom title'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'textdomain'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span> <span class=\"token single-quoted-string string\">'\"'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$html</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Change logo image class</span>\n  <span class=\"token variable\">$html</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'class=\"custom-logo\"'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// This assumes that this class has not been changed with `get_custom_logo_image_attributes`</span>\n    <span class=\"token single-quoted-string string\">'class=\"c-logo\"'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$html</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token variable\">$html</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Inlining SVG Logos</h2>\n<p>In some cases it makes sense to inline a given SVG logo, i. e. for controlled responsive behavior or some animation. This can be achieved by creating a custom function that is used to add the logo into your templates.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">function</span> <span class=\"token function\">customLogo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token variable\">$logoId</span> <span class=\"token operator\">=</span> <span class=\"token function\">get_theme_mod</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'custom_logo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$logoMime</span> <span class=\"token operator\">=</span> <span class=\"token function\">get_post_mime_type</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$logoId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'image/svg+xml'</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$logoMime</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$logoPath</span> <span class=\"token operator\">=</span> <span class=\"token function\">get_attached_file</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$logoId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$logoPath</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">'\n        &lt;a\n          class=\"c-logo-link\"\n          href=\"'</span> <span class=\"token punctuation\">.</span> <span class=\"token function\">home_url</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span> <span class=\"token single-quoted-string string\">'\"\n        >\n          &lt;span class=\"c-logo\">'</span> <span class=\"token punctuation\">.</span>\n            <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$logoPath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span>\n          <span class=\"token single-quoted-string string\">'&lt;/span>\n        &lt;/a>\n      '</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">get_custom_logo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">get_custom_logo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The function gets the ID of the logo image from the theme mods and then checks its mime type. If it is not an SVG we just return <code class=\"language-text\">get_custom_logo()</code>. However if we are working with an SVG we get its path and return the file contents into our markup. Adjust markup and handling of errors to your needs. Then wherever you add the logo in your templates just call <code class=\"language-text\">customLogo()</code> instead of <code class=\"language-text\">get_custom_logo()</code>.</p>","frontmatter":{"title":"Working with the WordPress customizer logo","date":"November 14, 2020","description":null}},"previous":{"fields":{"slug":"/wp-customizer-sanitizers/"},"frontmatter":{"title":"Sanitizer Functions For the WordPress Customizer"}},"next":null},"pageContext":{"id":"bde32c91-e7b0-5af9-9e0a-b790ef2483a0","previousPostId":"601dff8f-5ad9-5c58-8066-9f65cfc0e142","nextPostId":null}},"staticQueryHashes":["1633425274","2841359383"]}